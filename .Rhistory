seq(1:(drawingNumber))-1
# defining the number of pairs in the entire set
pairIndices <- seq(1:(drawingNumber))-1 # notice that this is ZERO-INDEXED to enable JavaScript compatibility
pairIndices
# defining the number of pairs in the entire set
pairIndices <- seq(1:(drawingNumber))-1 # notice that this is ZERO-INDEXED to enable JavaScript compatibility
# setting number of divisions (corresponding to number of participants)
breaks <- participant_num
# creating ordered index
sampleIdx <- cut(pairIndices, breaks = breaks, labels = FALSE)
# scramble the index
sampleIdx <- sample(sampleIdx)
# splitting the set
smallSets <- split(pairIndices, sampleIdx)
# shuffling the order of integers within each set
smallSets <- lapply(smallSets, sample)
# figuring out if the split works
setLength <- list()
for (i in 1:length(smallSets)) {
setLength[i] <- length(smallSets[[i]])
}
# checking that it sums up correctly; that no indices are lost
sum(unlist(setLength))
# loading the file names from both studies
study_1_stimuli <- list.files(path = '/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/new_stimuli_folder/study1_PNAS')
study_2_stimili <- list.files(path = '/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/new_stimuli_folder/study2_copyOnly')
study_3_stimuli <- list.files(path = '/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/new_stimuli_folder/study3_3conditions')
print(length(study_1_stimuli))
print(length(study_2_stimuli))
study_2_stimili <- list.files(path = '/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/new_stimuli_folder/study2_copyOnly')
# loading the file names from both studies
study_1_stimuli <- list.files(path = '/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/new_stimuli_folder/study1_PNAS')
study_2_stimuli <- list.files(path = '/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/new_stimuli_folder/study2_copyOnly')
study_3_stimuli <- list.files(path = '/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/new_stimuli_folder/study3_3conditions')
# checking lengths
print(length(study_1_stimuli))
print(length(study_2_stimuli))
print(length(study_3_stimuli))
# checking lengths
print(cat("drawings in study 1:", length(study_1_stimuli))
print(cat("drawings in study 1:", length(study_1_stimuli))
# checking lengths
cat("drawings in study 1:", length(study_1_stimuli))
# checking lengths
print(cat("drawings in study 1:", length(study_1_stimuli)))
# checking lengths
print(cat("drawings in study 1:", length(study_1_stimuli)))
print(cat("drawings in study 2:", length(study_2_stimuli)))
print(cat("drawings in study 3:", length(study_3_stimuli)))
# checking lengths
cat("drawings in study 1:", length(study_1_stimuli)))
# checking lengths
cat("drawings in study 1:", length(study_1_stimuli))
cat("drawings in study 2:", length(study_2_stimuli))
cat("drawings in study 3:", length(study_3_stimuli))
# checking lengths
cat("drawings in study 1:", length(study_1_stimuli))
cat("\ndrawings in study 2:", length(study_2_stimuli))
cat("\ndrawings in study 3:", length(study_3_stimuli))
# drawings in total
cat("\ndrawings in total:", (length(c(study_1_stimuli, study_2_stimuli, study_3_stimuli))))
# checking lengths
cat("drawings in study 1:", length(study_1_stimuli))
cat("\ndrawings in study 2:", length(study_2_stimuli))
# checking lengths
cat("drawings in study 1:", length(study_1_stimuli))
cat("\ndrawings in study 2:", length(study_2_stimuli))
cat("\ndrawings in study 3:", length(study_3_stimuli))
# drawings in total
cat("\ndrawings in total:", (length(c(study_1_stimuli, study_2_stimuli, study_3_stimuli))))
# loading the file names from both studies
study_1_stimuli <- list.files(path = '/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/new_stimuli_folder/study1_PNAS')
study_2_stimuli <- list.files(path = '/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/new_stimuli_folder/study2_copyOnly')
study_3_stimuli <- list.files(path = '/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/new_stimuli_folder/study3_3conditions')
# checking lengths
cat("drawings in study 1:", length(study_1_stimuli))
cat("\ndrawings in study 2:", length(study_2_stimuli))
cat("\ndrawings in study 3:", length(study_3_stimuli))
# drawings in total
cat("\ndrawings in total:", (length(c(study_1_stimuli, study_2_stimuli, study_3_stimuli))))
# checking lengths
cat("drawings in study 1:", length(study_1_stimuli))
cat("\ndrawings in study 2:", length(study_2_stimuli))
cat("\ndrawings in study 3:", length(study_3_stimuli))
# drawings in total
cat("\n\ndrawings in total:", (length(c(study_1_stimuli, study_2_stimuli, study_3_stimuli))))
# combining the file names into a single list
combined_stimuli <- c(study_1_stimuli, study_2_stimuli, study_3_stimuli)
length(combined_stimuli)
# converting the file name list to a JSON file
stimuliFileNameList <- jsonlite::toJSON(combined_stimuli, pretty = TRUE)
# saving the JSON file
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/stimuliFileNameLists/"
name = "stimuliFileNameList_study_1_2_3_"
iteration = "_1"
extension = ".JSON"
write(stimuliFileNameList, file = paste0(path, name, iteration, extension))
# looking into the file list
stimuliFileNameList
# looking into the file list
head(stimuliFileNameList)
# loading the file names from both studies
study_1_stimuli <- list.files(path = '/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/new_stimuli_folder/study1_drawings')
study_2_stimuli <- list.files(path = '/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/new_stimuli_folder/study2_drawings')
study_3_stimuli <- list.files(path = '/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/new_stimuli_folder/study3_drawings')
# checking lengths
cat("drawings in study 1:", length(study_1_stimuli))
cat("\ndrawings in study 2:", length(study_2_stimuli))
cat("\ndrawings in study 3:", length(study_3_stimuli))
# drawings in total
cat("\n\ndrawings in total:", (length(c(study_1_stimuli, study_2_stimuli, study_3_stimuli))))
# combining the file names into a single list
combined_stimuli <- c(study_1_stimuli, study_2_stimuli, study_3_stimuli)
length(combined_stimuli)
# converting the file name list to a JSON file
stimuliFileNameList <- jsonlite::toJSON(combined_stimuli, pretty = TRUE)
# looking into the file list
stimuliFileNameList[0:100]
# looking into the file list
stimuliFileNameList[1][1]
# saving the JSON file
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/stimuliFileNameLists/"
name = "stimuliFileNameList_study_1_2_3_"
iteration = "_1"
extension = ".JSON"
write(stimuliFileNameList, file = paste0(path, name, iteration, extension))
# saving the JSON file
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/stimuliFileNameLists/"
name = "stimuliFileNameList_study_1_2_3"
iteration = "_1"
extension = ".JSON"
write(stimuliFileNameList, file = paste0(path, name, iteration, extension))
# saving the JSON file
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/stimuliFileNameLists/"
name = "stimuliFileNameList_study_1_2_3"
iteration = "_iteration_1"
extension = ".JSON"
write(stimuliFileNameList, file = paste0(path, name, iteration, extension))
fileNameList <- jsonlite::read_json('/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/stimuliFileNameLists/stimuliFileNameList_study_1_2_3_iteration_1.JSON', simplifyVector = TRUE) # simplifyVector = true removes unnecessary nesting
cat("Number of drawings =", length(fileNameList))
participant_num <- 100
ratings_pr_image <- 7
drawingNumber <- length(fileNameList)
# defining the number of pairs in the entire set
pairIndices <- seq(1:(drawingNumber))-1
# Notice that this is ZERO-INDEXED to enable JavaScript compatibility.
# It is necessary to start with 0 because this 'pairIndices' variable is a list of indices, used to load images from file name lists in JS.
# setting number of divisions (corresponding to number of participants)
breaks <- participant_num
# creating ordered index
sampleIdx <- cut(pairIndices, breaks = breaks, labels = FALSE)
# scramble the index
sampleIdx <- sample(sampleIdx)
# splitting the set
smallSets <- split(pairIndices, sampleIdx)
# shuffling the order of integers within each set
smallSets <- lapply(smallSets, sample)
# figuring out if the split works
setLength <- list()
for (i in 1:length(smallSets)) {
setLength[i] <- length(smallSets[[i]])
}
# checking that it sums up correctly; that no indices are lost
sum(unlist(setLength))
small_set_length_list <- lapply(smallSets, length)
simplehist(unlist(small_set_length_list),
xlab = "number of drawings in the samll sets")
pacman::p_load(
tidyverse,
base64enc,
imager,
magick,
ggplot2,
rethinking)
small_set_length_list <- lapply(smallSets, length)
simplehist(unlist(small_set_length_list),
xlab = "number of drawings in the samll sets")
small_set_length_list <- lapply(smallSets, length)
simplehist(unlist(small_set_length_list),
xlab = "number of drawings in the small sets")
# defining the number of sets to be combined (corresponding to the number of ratings pr. drawing pair)
n <- ratings_pr_image
# this is then used to make an offset sequence
offsets <- seq(0, n-1)
# setting up empty list
setList <- list()
# looping through the small sets and combining them according to the specified structure
for (i in 1:100) {
setList[[i]] <- unlist( lapply(
offsets, function( x ) smallSets[[( i - 1 + x ) %% 100 + 1]] # computes indices of small sets as a function of the offset parameter
) )
}
# randomizing order of entries within each list of drawing pair indices (to make sure no participant is presented with similar orders of drawings)
setList <- lapply(setList, sample)
# checking the length of the final lists of lists
length(setList)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList))
unique(table(unlist(setList)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList)) {
status[i] <- (length(unique(setList[[i]])) == length(setList[[i]]))
}
unique(status)
unpackedSet <- tibble(unlist(setList))
colnames(unpackedSet) <- "idx"
# the length of this set should correspond to n for all indices
# what we are checking is that each drawing (yet only an index) appears n times in total across all rating sets
length(t(filter(unpackedSet, idx == "6000"))) == n
# finally, we can visualize the length of each individual rating set to appreciate that there is a bit of variation in the length:
length_list <- lapply(setList, length)
simplehist(unlist(length_list),
xlab = "number of drawings in the final rating sets \n(before adding attention checks)")
# we have the following parameters
stimuli_set_length <- length(setList[[1]]) # this should be different depending on the actual set list
interval_span <- 20
interval_center <- ceiling(stimuli_set_length / 6)
# we can now sample random positions
plot(
sample(( interval_center - interval_span ):( interval_center + interval_span ), 20, replace = TRUE),
ylim=c(0,100))
# we have the following parameters
stimuli_set_length <- length(setList[[1]]) # this should be different depending on the actual set list
interval_span <- 20
interval_center <- ceiling(stimuli_set_length / 6)
# we can now sample random positions
plot(
sample(( interval_center - interval_span ):( interval_center + interval_span ), 20, replace = TRUE),
ylim=c(0,200))
random_seed <- 2025
# setting a seed for reproducibility
set.seed(random_seed)
# defining the number of pairs in the entire set
pairIndices <- seq(1:(drawingNumber))-1
# Notice that this is ZERO-INDEXED to enable JavaScript compatibility.
# It is necessary to start with 0 because this 'pairIndices' variable is a list of indices, used to load images from file name lists in JS.
# setting number of divisions (corresponding to number of participants)
breaks <- participant_num
# creating ordered index
sampleIdx <- cut(pairIndices, breaks = breaks, labels = FALSE)
# scramble the index
sampleIdx <- sample(sampleIdx)
# splitting the set
smallSets <- split(pairIndices, sampleIdx)
# shuffling the order of integers within each set
smallSets <- lapply(smallSets, sample)
# figuring out if the split works
setLength <- list()
for (i in 1:length(smallSets)) {
setLength[i] <- length(smallSets[[i]])
}
# checking that it sums up correctly; that no indices are lost
sum(unlist(setLength))
small_set_length_list <- lapply(smallSets, length)
simplehist(unlist(small_set_length_list),
xlab = "number of drawings in the small sets")
# defining the number of sets to be combined (corresponding to the number of ratings pr. drawing pair)
n <- ratings_pr_image
# this is then used to make an offset sequence
offsets <- seq(0, n-1)
# setting up empty list
setList <- list()
# looping through the small sets and combining them according to the specified structure
for (i in 1:100) {
setList[[i]] <- unlist( lapply(
offsets, function( x ) smallSets[[( i - 1 + x ) %% 100 + 1]] # computes indices of small sets as a function of the offset parameter
) )
}
# randomizing order of entries within each list of drawing pair indices (to make sure no participant is presented with similar orders of drawings)
setList <- lapply(setList, sample)
# checking the length of the final lists of lists
length(setList)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList))
unique(table(unlist(setList)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList)) {
status[i] <- (length(unique(setList[[i]])) == length(setList[[i]]))
}
unique(status)
unpackedSet <- tibble(unlist(setList))
colnames(unpackedSet) <- "idx"
# the length of this set should correspond to n for all indices
# what we are checking is that each drawing (yet only an index) appears n times in total across all rating sets
length(t(filter(unpackedSet, idx == "6000"))) == n
# finally, we can visualize the length of each individual rating set to appreciate that there is a bit of variation in the length:
length_list <- lapply(setList, length)
simplehist(unlist(length_list),
xlab = "number of drawings in the final rating sets \n(before adding attention checks)")
# setting random seed
set.seed(random_seed)
# we have the following parameters
stimuli_set_length <- length(setList[[1]]) # this should be different depending on the actual set list
interval_span <- 20
interval_center <- ceiling(stimuli_set_length / 6)
# we can now sample random positions
plot(
sample(( interval_center - interval_span ):( interval_center + interval_span ), 20, replace = TRUE),
ylim=c(0,200))
# we can now turn this into a function
create_attention_check_index <- function(stimuli_set_length, interval_span) {
interval_center <- ceiling(stimuli_set_length / 6);
att_check_position_list <- c(stimuli_set_length,
sample((interval_center*4 - interval_span ):( interval_center*4 + interval_span ), 1),
sample((interval_center*3 - interval_span ):( interval_center*3 + interval_span ), 1) ,
sample((interval_center*2 - interval_span ):( interval_center*2 + interval_span ), 1) ,
sample((interval_center*1 - interval_span ):( interval_center*1 + interval_span ), 1) ,
0); # this has to be in reversed order as the set will keep growing as we add new entries
return(att_check_position_list)
}
# and test it out:
create_attention_check_index(stimuli_set_length = 434, interval_span = 10)
attention_check_names <- c("a1", "a2", "a3", "a4", "a5", "a6")
# ideally, we want these shuffled right away as the new set lists are generated
# perhaps the easiest way to do this is simply to run the shuffle in the 'outer' loop using sample
# set parameters and seed
set.seed(random_seed)
interval_span = 10
# creating a new list
setListAttCheck <- list()
# looping through the old set lists to add attention checks
for (i in 1:100) {
x <- setList[[i]];
shuffled_att_check_names <- sample(attention_check_names);
att_check_index_list <- create_attention_check_index(stimuli_set_length = length(setList[[i]]),
interval_span = interval_span);
for (j in 1:6) {
x <- append(x, shuffled_att_check_names[j], after = att_check_index_list[j]);
}
setListAttCheck[[i]] <- x;
}
# adding indices ('names') to the setList
names(setListAttCheck) <- as.character(seq_along(setListAttCheck))
# converting to JSON
setListAttCheckJSON <- jsonlite::toJSON(setListAttCheck, pretty = TRUE)
# checking the data structure
head(setListAttCheckJSON)
# checking the data structure
readLines(setListAttCheckJSON, n = 4)
# checking the data structure
setListAttCheckJSON
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/"
name = "setListAttCheck"
iteration = "_all_studies_1"
extension = ".JSON"
write(setListAttCheckJSON, file = paste0(path, name, iteration, extension))
length_list <- lapply(setListAttCheck, length)
simplehist(unlist(length_list),
xlab = "number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
fileNameList <- jsonlite::read_json('/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/stimuliFileNameLists/stimuliFileNameList_study_1_2_3_iteration_1.JSON', simplifyVector = TRUE) # simplifyVector = true removes unnecessary nesting
cat("Number of drawings =", length(fileNameList))
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(
tidyverse,
base64enc,
imager,
magick,
ggplot2,
rethinking)
fileNameList <- jsonlite::read_json('/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/stimuliFileNameLists/stimuliFileNameList_study_1_2_3_iteration_1.JSON', simplifyVector = TRUE) # simplifyVector = true removes unnecessary nesting
cat("Number of drawings =", length(fileNameList))
cat("Number of drawings =", length(fileNameList), "\nexpected number of files =", 7786)
cat("Number of drawings =", length(fileNameList), ";", "\nExpected number of files =", 7786)
# parameters
participant_num <- 100
ratings_pr_image <- 5
drawingNumber <- length(fileNameList)
random_seed <- 2025
# setting a seed for reproducibility
set.seed(random_seed)
# defining the number of pairs in the entire set
pairIndices <- seq(1:(drawingNumber))-1
# Notice that this is ZERO-INDEXED to enable JavaScript compatibility.
# It is necessary to start with 0 because this 'pairIndices' variable is a list of indices, used to load images from file name lists in JS.
# setting number of divisions (corresponding to number of participants)
breaks <- participant_num
# creating ordered index
sampleIdx <- cut(pairIndices, breaks = breaks, labels = FALSE)
# scramble the index
sampleIdx <- sample(sampleIdx)
# splitting the set
smallSets <- split(pairIndices, sampleIdx)
# shuffling the order of integers within each set
smallSets <- lapply(smallSets, sample)
# figuring out if the split works
setLength <- list()
for (i in 1:length(smallSets)) {
setLength[i] <- length(smallSets[[i]])
}
# checking that it sums up correctly; that no indices are lost
sum(unlist(setLength))
small_set_length_list <- lapply(smallSets, length)
simplehist(unlist(small_set_length_list),
xlab = "number of drawings in the small sets")
# defining the number of sets to be combined (corresponding to the number of ratings pr. drawing pair)
n <- ratings_pr_image
# this is then used to make an offset sequence
offsets <- seq(0, n-1)
# setting up empty list
setList <- list()
# looping through the small sets and combining them according to the specified structure
for (i in 1:100) {
setList[[i]] <- unlist( lapply(
offsets, function( x ) smallSets[[( i - 1 + x ) %% 100 + 1]] # computes indices of small sets as a function of the offset parameter
) )
}
# randomizing order of entries within each list of drawing pair indices (to make sure no participant is presented with similar orders of drawings)
setList <- lapply(setList, sample)
# checking the length of the final lists of lists
length(setList)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList))
unique(table(unlist(setList)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList)) {
status[i] <- (length(unique(setList[[i]])) == length(setList[[i]]))
}
unique(status)
unpackedSet <- tibble(unlist(setList))
colnames(unpackedSet) <- "idx"
# the length of this set should correspond to n for all indices
# what we are checking is that each drawing (yet only an index) appears n times in total across all rating sets
length(t(filter(unpackedSet, idx == "6000"))) == n
# finally, we can visualize the length of each individual rating set to appreciate that there is a bit of variation in the length:
length_list <- lapply(setList, length)
simplehist(unlist(length_list),
xlab = "number of drawings in the final rating sets \n(before adding attention checks)")
# setting random seed
set.seed(random_seed)
# we have the following parameters
stimuli_set_length <- length(setList[[1]]) # this should be different depending on the actual set list
interval_span <- 20
interval_center <- ceiling(stimuli_set_length / 6)
# we can now sample random positions
plot(
sample(( interval_center - interval_span ):( interval_center + interval_span ), 20, replace = TRUE),
ylim=c(0,200))
length_list
setList
# and test it out:
create_attention_check_index(stimuli_set_length = length(setList[[1]]), interval_span = 10)
length(setList[[1]])
# we can now turn this into a function
create_attention_check_index <- function(stimuli_set_length, interval_span) {
interval_center <- ceiling(stimuli_set_length / 6);
att_check_position_list <- c(stimuli_set_length,
sample((interval_center*4 - interval_span ):( interval_center*4 + interval_span ), 1),
sample((interval_center*3 - interval_span ):( interval_center*3 + interval_span ), 1) ,
sample((interval_center*2 - interval_span ):( interval_center*2 + interval_span ), 1) ,
sample((interval_center*1 - interval_span ):( interval_center*1 + interval_span ), 1) ,
0); # this has to be in reversed order as the set will keep growing as we add new entries
return(att_check_position_list)
}
# and test it out:
create_attention_check_index(stimuli_set_length = length(setList[[1]]), interval_span = 10)
length(setList[[1]])
attention_check_names <- c("a1", "a2", "a3", "a4", "a5", "a6")
# ideally, we want these shuffled right away as the new set lists are generated
# perhaps the easiest way to do this is simply to run the shuffle in the 'outer' loop using sample
# set parameters and seed
set.seed(random_seed)
interval_span = 10
# creating a new list
setListAttCheck <- list()
# looping through the old set lists to add attention checks
for (i in 1:100) {
x <- setList[[i]];
shuffled_att_check_names <- sample(attention_check_names);
att_check_index_list <- create_attention_check_index(stimuli_set_length = length(setList[[i]]),
interval_span = interval_span);
for (j in 1:6) {
x <- append(x, shuffled_att_check_names[j], after = att_check_index_list[j]);
}
setListAttCheck[[i]] <- x;
}
# visualising lengths of the final ratings sets
length_list <- lapply(setListAttCheck, length)
simplehist(unlist(length_list),
xlab = "number of drawings in the final rating sets \n(after adding attention checks)")
# visualising lengths of the final ratings sets
length_list <- lapply(setListAttCheck, length)
simplehist(unlist(length_list),
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# visualising lengths of the final ratings sets
length_list <- lapply(setListAttCheck, length)
simplehist(unlist(length_list),
title = "Number of drawings in the final rating sets \n(after adding attention checks)")
# visualising lengths of the final ratings sets
length_list <- lapply(setListAttCheck, length)
simplehist(unlist(length_list),
main = "Number of drawings in the final rating sets \n(after adding attention checks)")
# visualising lengths of the final ratings sets
length_list <- lapply(setListAttCheck, length)
simplehist(unlist(length_list),
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
setListAttCheckJSON
# adding indices ('names') to the setList
names(setListAttCheck) <- as.character(seq_along(setListAttCheck))
# converting to JSON
setListAttCheckJSON <- jsonlite::toJSON(setListAttCheck, pretty = TRUE)
# checking the data structure
#setListAttCheckJSON
setListAttCheckJSON
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/"
name = "setListAttCheck"
iteration = "all_studies_5_ratings" # please change before running to avoid overwriting existing file
extension = ".JSON"
write(setListAttCheckJSON, file = paste0(path, name, iteration, extension))
