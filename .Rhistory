simplehist(unlist(length_list),
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 1,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks <- append_attention_checks(stimuli_set_list = setList1,
interval_span = 10,
random_seed = 2025)
# visualising lengths of the final ratings sets
length_list <- lapply(setListTestAttentionChecks, length)
simplehist(unlist(length_list),
main = "Stim set from study 1"
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks <- append_attention_checks(stimuli_set_list = setList1,
interval_span = 10,
random_seed = 2025)
# visualising lengths of the final ratings sets
length_list <- lapply(setListTestAttentionChecks, length)
simplehist(unlist(length_list),
main = "Stim set from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks <- append_attention_checks(stimuli_set_list = setList1,
interval_span = 10,
random_seed = 2025)
# visualising lengths of the final ratings sets
length_list <- lapply(setListTestAttentionChecks, length)
simplehist(unlist(length_list),
main = "Stim sets from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks1 <- append_attention_checks(stimuli_set_list = setList1,
interval_span = 10,
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 1,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# visualising lengths of the final ratings sets
length_list <- lapply(setListTestAttentionChecks1, length)
simplehist(unlist(length_list),
main = "Stim sets from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks1,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 1,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# creating stimuli set for study 1
setList2 <- create_random_subsets(participant_num = 30,
ratings_pr_image = 5,
drawingNumber = length(study_2_stimuli),
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList2))
unique(table(unlist(setList2)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList2)) {
status[i] <- (length(unique(setList2[[i]])) == length(setList2[[i]]))
}
unique(status) # this should be TRUE
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks2 <- append_attention_checks(stimuli_set_list = setList2,
interval_span = 10,
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks2,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 2,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# visualising lengths of the final ratings sets
# set 1
length_list <- lapply(setListTestAttentionChecks1, length)
simplehist(unlist(length_list),
main = "Stim sets from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 2
length_list <- lapply(setListTestAttentionChecks2, length)
simplehist(unlist(length_list),
main = "Stim sets from study 2",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
# creating stimuli set for study 3
setList3 <- create_random_subsets(participant_num = 60,
ratings_pr_image = 5,
drawingNumber = length(study_3_stimuli),
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList3))
unique(table(unlist(setList3)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList3)) {
status[i] <- (length(unique(setList3[[i]])) == length(setList3[[i]]))
}
unique(status) # this should be TRUE
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks3 <- append_attention_checks(stimuli_set_list = setList3,
interval_span = 10,
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks3,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 3,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# visualising lengths of the final ratings sets
# set 1
length_list <- lapply(setListTestAttentionChecks1, length)
simplehist(unlist(length_list),
main = "Stim sets from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 2
length_list <- lapply(setListTestAttentionChecks2, length)
simplehist(unlist(length_list),
main = "Stim sets from study 2",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 3
length_list <- lapply(setListTestAttentionChecks3, length)
simplehist(unlist(length_list),
main = "Stim sets from study 3",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
setListTestAttentionChecks3
knitr::opts_chunk$set(echo = TRUE)
length(setListTestAttentionChecks3)
knitr::opts_chunk$set(echo = TRUE)
# creating stimuli set for study 3
setList3 <- create_random_subsets(participant_num = 60,
ratings_pr_image = 5,
drawingNumber = length(study_3_stimuli),
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList3))
unique(table(unlist(setList3)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList3)) {
status[i] <- (length(unique(setList3[[i]])) == length(setList3[[i]]))
}
unique(status) # this should be TRUE
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks3 <- append_attention_checks(stimuli_set_list = setList3,
interval_span = 10,
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks3,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 3,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# visualising lengths of the final ratings sets
# set 1
length_list <- lapply(setListTestAttentionChecks1, length)
simplehist(unlist(length_list),
main = "Stim sets from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 2
length_list <- lapply(setListTestAttentionChecks2, length)
simplehist(unlist(length_list),
main = "Stim sets from study 2",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 3
length_list <- lapply(setListTestAttentionChecks3, length)
simplehist(unlist(length_list),
main = "Stim sets from study 3",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
length(setListTestAttentionChecks3)
knitr::opts_chunk$set(echo = TRUE)
length(setList3)
knitr::opts_chunk$set(echo = TRUE)
setListTestAttentionChecks3
knitr::opts_chunk$set(echo = TRUE)
length(setListTestAttentionChecks3)
knitr::opts_chunk$set(echo = TRUE)
# A function that appends the attention check indices to the the stimuli list
append_attention_checks <- function(stimuli_set_list, interval_span = 10, random_seed) {
# creating a new list
setListAttCheck <- list()
# defining variables
n = length(stimuli_set_list) # corresponds to the participant number
# looping through the old set lists to add attention checks
for (i in 1:n) {
setList <- stimuli_set_list;
x <- setList[[i]];
shuffled_att_check_names <- sample(attention_check_names);
att_check_index_list <- create_attention_check_index(stimuli_set_length = length(setList[[i]]),
interval_span = interval_span);
for (j in 1:6) {
x <- append(x, shuffled_att_check_names[j], after = att_check_index_list[j]);
}
setListAttCheck[[i]] <- x;
}
return(setListAttCheck);
}
knitr::opts_chunk$set(echo = TRUE)
# creating stimuli set for study 1
setList1 <- create_random_subsets(participant_num = 30,
ratings_pr_image = 5,
drawingNumber = length(study_1_stimuli),
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList1))
unique(table(unlist(setList1)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList1)) {
status[i] <- (length(unique(setList1[[i]])) == length(setList1[[i]]))
}
unique(status) # this should be TRUE
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks1 <- append_attention_checks(stimuli_set_list = setList1,
interval_span = 10,
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks1,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 1,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# creating stimuli set for study 2
setList2 <- create_random_subsets(participant_num = 30,
ratings_pr_image = 5,
drawingNumber = length(study_2_stimuli),
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList2))
unique(table(unlist(setList2)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList2)) {
status[i] <- (length(unique(setList2[[i]])) == length(setList2[[i]]))
}
unique(status) # this should be TRUE
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks2 <- append_attention_checks(stimuli_set_list = setList2,
interval_span = 10,
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks2,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 2,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# creating stimuli set for study 3
setList3 <- create_random_subsets(participant_num = 60,
ratings_pr_image = 5,
drawingNumber = length(study_3_stimuli),
random_seed = 2025)
length(setList3)
knitr::opts_chunk$set(echo = TRUE)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList3))
unique(table(unlist(setList3)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList3)) {
status[i] <- (length(unique(setList3[[i]])) == length(setList3[[i]]))
}
unique(status) # this should be TRUE
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks3 <- append_attention_checks(stimuli_set_list = setList3,
interval_span = 10,
random_seed = 2025)
length(setListTestAttentionChecks3)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks3,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 3,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# visualising lengths of the final ratings sets
# set 1
length_list <- lapply(setListTestAttentionChecks1, length)
simplehist(unlist(length_list),
main = "Stim sets from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 2
length_list <- lapply(setListTestAttentionChecks2, length)
simplehist(unlist(length_list),
main = "Stim sets from study 2",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 3
length_list <- lapply(setListTestAttentionChecks3, length)
simplehist(unlist(length_list),
main = "Stim sets from study 3",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
length(setListTestAttentionChecks3)
knitr::opts_chunk$set(echo = TRUE)
# converting the file name list to a JSON file
stimuliFileNameListStudy1 <- jsonlite::toJSON(study_1_stimuli, pretty = TRUE)
knitr::opts_chunk$set(echo = TRUE)
stimuliFileNameListStudy1
knitr::opts_chunk$set(echo = TRUE)
# converting the file name lists to JSON files
stimuliFileNameListStudy1 <- jsonlite::toJSON(study_1_stimuli, pretty = TRUE)
knitr::opts_chunk$set(echo = TRUE)
stimuliFileNameListStudy1 <- jsonlite::toJSON(study_1_stimuli, pretty = TRUE)
stimuliFileNameListStudy2 <- jsonlite::toJSON(study_2_stimuli, pretty = TRUE)
stimuliFileNameListStudy3 <- jsonlite::toJSON(study_3_stimuli, pretty = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# saving the JSON files
save_stim_list <- function(name, iteration) {
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/stimuliFileNameLists/"
extension = ".JSON"
write(stimuliFileNameList, file = paste0(path, name, iteration, extension))
}
knitr::opts_chunk$set(echo = TRUE)
# saving the JSON files
save_stim_list <- function(stim_file_name_list, name, study, iteration) {
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/stimuliFileNameLists/"
extension = ".JSON"
write(stim_file_name_list, file = paste0(path, name, "_study_", study, "_", iteration, extension))
}
knitr::opts_chunk$set(echo = TRUE)
# study 1
save_stim_list(stim_file_name_list = stimuliFileNameListStudy1,
name = "stim_file_name_list",
study = 1,
iteration = "iteration_1")
# study 2
save_stim_list(stim_file_name_list = stimuliFileNameListStudy2,
name = "stim_file_name_list",
study = 2,
iteration = "iteration_1")
# study 3
save_stim_list(stim_file_name_list = stimuliFileNameListStudy3,
name = "stim_file_name_list",
study = 3,
iteration = "iteration_1")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse,
rjson,
jsonlite)
study_1_stim <- fromJSON("/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/new_stim_list_study_1_5_ratings.JSON")
study_2_stim <- fromJSON("/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/new_stim_list_study_2_5_ratings.JSON")
study_3_stim <- fromJSON("/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/new_stim_list_study_3_5_ratings.JSON")
completed_participants_study_3 <- 14
create_new_sets <- function(study_stim_set, start_index, end_index) {
unrated <- study_stim_set[-(start_index:end_index)]
already_rated <- study_stim_set[(start_index:end_index)]
# making new names starting from one:
new_names <- 1:length(unrated)
# assigning new names to the unrated set:
names(unrated) <- new_names
# this then needs to be stored as a unique object
return(list(unrated_sets = unrated,
already_rated_sets = already_rated))
}
study_stim_set
study_3_stim
study_3_stim
create_new_sets <- function(study_stim_set, remove_from, remove_till) {
unrated <- study_stim_set[-(remove_from:remove_till)]
already_rated <- study_stim_set[(remove_from:remove_till)]
# making new names starting from one:
new_names <- 1:length(unrated)
# assigning new names to the unrated set:
names(unrated) <- new_names
# this then needs to be stored as a unique object
return(list(unrated_sets = unrated,
already_rated_sets = already_rated))
}
study_3_new_sets <- create_new_sets(study_stim_set = study_3_stim,
remove_from = 5,
remove_till = 14)
study_3_new_sets
study_3_new_sets$unrated_sets
for (i in 1:length(study_3_new_sets$unrated_sets)) {
n = completed_participants_study_3
print(unique(study_3_new_sets$unrated_sets[[i]] == study_3_stim[[i+n]]))
}
for (i in 1:length(study_3_new_sets$unrated_sets)) {
n = 10
print(unique(study_3_new_sets$unrated_sets[[i]] == study_3_stim[[i+n]]))
}
study_3_stim[[1]]
study_3_new_sets$unrated_sets[[1]]
study_3_new_sets$unrated_sets[[1]] == study_3_stim[[1]]
for (i in 1:4) {
study_3_new_sets$unrated_sets[[i]] == study_3_stim[[i]]
}
print(unique(study_3_new_sets$unrated_sets[[i]] == study_3_stim[[i]]))
for (i in 1:4) {
print(unique(study_3_new_sets$unrated_sets[[i]] == study_3_stim[[i]]))
}
# all should be true
for (i in 1:4) {
print(unique(study_3_new_sets$unrated_sets[[i]] == study_3_stim[[i]]))
}
# all should be false
for (i in 5:14) {
print(unique(study_3_new_sets$unrated_sets[[i]] == study_3_stim[[i]]))
}
study_3_stim[[13]]
study_3_stim[[1]]
print(ident(study_3_new_sets$unrated_sets[[i]] == study_3_stim[[i]]))
# all should be true
for (i in 5:50) {
print(unique(study_3_new_sets$unrated_sets[[i]] == study_3_stim[[i]]))
}
# all should be false
for (i in 5:14) {
print(ident(study_3_new_sets$unrated_sets[[i]] == study_3_stim[[i]]))
}
print(ident(study_3_new_sets$unrated_sets[[i]], study_3_stim[[i]]))
# all should be false
for (i in 5:14) {
print(ident(study_3_new_sets$unrated_sets[[i]], study_3_stim[[i]]))
}
# all should be false
for (i in 5:14) {
print(identical(study_3_new_sets$unrated_sets[[i]], study_3_stim[[i]]))
}
# all should be true
for (i in 1:4) {
print(identical(study_3_new_sets$unrated_sets[[i]], study_3_stim[[i]]))
}
# all should be false
for (i in 5:14) {
print(identical(study_3_new_sets$unrated_sets[[i]], study_3_stim[[i]]))
}
# all should be true
for (i in 5:50) {
print(identical(study_3_new_sets$unrated_sets[[i]], study_3_stim[[i]]))
}
# all should be true
for (i in 5:50) {
print(identical(study_3_new_sets$unrated_sets[[i]], study_3_stim[[i+10]]))
}
# all should be true
removed_rows <- 10
for (i in 5:50) {
print(identical(study_3_new_sets$unrated_sets[[i]], study_3_stim[[i+removed_rows]]))
}
# all should be true
for (i in 1:4) {
print(identical(study_3_new_sets$unrated_sets[[i]], study_3_stim[[i]]))
}
# all should be false
for (i in 5:14) {
print(identical(study_3_new_sets$unrated_sets[[i]], study_3_stim[[i]]))
}
# all should be true
removed_rows <- 10
for (i in 5:50) {
print(identical(study_3_new_sets$unrated_sets[[i]], study_3_stim[[i+removed_rows]]))
}
length(study_3_new_sets$unrated_sets)
# checking that the length matches the expectations
length(study_3_new_sets$unrated_sets)
# storing the unrated sets individually
updated_stim_set_study_3 <- study_3_new_sets$unrated_sets
# checking that the names are correct
names(updated_stim_set_study_3)
# checking that the names are correct
plot(names(updated_stim_set_study_3))
names(updated_stim_set_study_3)
plot(names(updated_stim_set_study_3))
# converting back to JSON format
updated_stim_set_study_3_JSON <- jsonlite::toJSON(updated_stim_set_study_3, pretty = TRUE)
updated_stim_set_study_3_JSON
# function to save as JSON file
finalize_set <- function(JSON_set_list, path, file_name, study_nr, number_of_ratings) {
iteration = paste0("_study_", study_nr, "_", number_of_ratings, "_ratings")
extension = ".JSON"
write(JSON_set_list, file = paste0(path, file_name, iteration, extension))
}
# saving new set for study 3
finalize_set(JSON_set_list = updated_stim_set_study_3_JSON,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/Pilot/updated_stim_sets_after_pilot_2/",
file_name = "new_stim_list",
study_nr = 3,
number_of_ratings = 5)
study_1_stim_alt <- fromJSON("/Users/christianstenbro/Desktop/new_stim_list_study_1_5_ratings.JSON")
study_1_stim <- fromJSON("/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/new_stim_list_study_1_5_ratings.JSON")
identical(study_1_stim, study_1_stim_alt)
study_2_stim_alt <- fromJSON("/Users/christianstenbro/Desktop/new_stim_list_study_2_5_ratings.JSON")
identical(study_2_stim, study_2_stim_alt)
