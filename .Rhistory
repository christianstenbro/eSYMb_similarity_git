knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(
tidyverse,
base64enc,
imager,
magick,
ggplot2,
rethinking)
# setting directory
setwd("/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/sample drawings 2")
knitr::opts_knit$set(root.dir = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/sample drawings 2")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/sample drawings 2")
knitr::opts_knit$set(root.dir = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/sample drawings 2")
getwd8
getwd()
d1 = read_csv("memorability_sample_Data.csv")
colnames(d1)
# NOTE: The target drawing and the reproduction are in the following columns:
# drawing: the target drawing
# drawing_copy: the reproduction
# The drawing is encoded in base64 in this experiment, as a long string starting with "data:image/png;base64,"
d1$drawing[1]
# defining global parameters
participant_number = 100
ratings = 3
setSize <- 1000 # normally this should be length(d1$drawing)
# computing indices for each pair in the entire set
pairIndices <- seq(1:setSize)
# setting number of divisions (should correspond to the number of participants)
breaks <- 100
# creating ordered index
sampleIdx <- cut(pairIndices, breaks = breaks, labels = FALSE)
# scramble the index
sampleIdx <- sample(sampleIdx)
# splitting the set
smallSets <- split(pairIndices, sampleIdx)
# shuffling the order of integers within each set
smallSets <- lapply(smallSets, sample)
# figuring out if the split works
setLength <- list()
for (i in 1:length(smallSets)) {
setLength[i] <- length(smallSets[[i]])
}
# checking that it sums up correctly; that no indices are lost
sum(unlist(setLength))
# parametric version
# setting up empty list
setList <- list()
# defining the number of sets to be combined (corresponding to the number of ratings pr. drawing pair)
n <- ratings
offsets <- seq(0, n-1)
# looping through the small sets and combining them according to the specified structure
for (i in 1:100) {
setList[[i]] <- unlist( lapply(
offsets, function( x ) smallSets[[( i - 1 + x ) %% 100 + 1]] # computes indices of small sets as a function of the offset parameter
) )
}
# randomizing order of entries within each list of drawing pair indices (to make sure no participant is presented with similar orders of drawings)
setList <- lapply(setList, sample)
# checking the length of the final lists of lists
length(setList)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList))
unique(table(unlist(setList)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList)) {
status[i] <- (length(unique(setList[[i]])) == length(setList[[i]]))
}
unique(status)
unpackedSet <- tibble(unlist(setList))
colnames(unpackedSet) <- "idx"
# the length of this set should correspond to n for all indices
length(t(filter(unpackedSet, idx == "3000"))) == n
unpackedSet <- tibble(unlist(setList))
colnames(unpackedSet) <- "idx"
# the length of this set should correspond to n for all indices
length(t(filter(unpackedSet, idx == "1000"))) == n
unpackedSet <- tibble(unlist(setList))
colnames(unpackedSet) <- "idx"
# the length of this set should correspond to n for all indices
length(t(filter(unpackedSet, idx == "1100"))) == n
unpackedSet <- tibble(unlist(setList))
colnames(unpackedSet) <- "idx"
# the length of this set should correspond to n for all indices
length(t(filter(unpackedSet, idx == "1000"))) == n
# adding indices ('names') to the setList
names(setList) <- as.character(seq_along(setList))
# converting to JSON
setListJSON <- jsonlite::toJSON(setList, pretty = TRUE)
# checking the data structure
setListJSON
# saving the set
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/"
name = "setListJSON"
iteration = "_3"
extension = ".JSON"
write(setListJSON, file = paste0(path, name, iteration, extension))
length(setSize)
length(t(setSize))
setSize
# naming batch
batch = 3
# number of images
n = setSize
# setting up loop
for (j in 1:n) {
# setting up the file attributes
path_name = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_export/"
file_name = paste0(path_name,"test_pair_", j, "_batch_", batch, ".png")
png(file_name, units="in", width=7.29, height=4.51, res=500)
# sampling a random pair
i = sample(1:nrow(d1), 1)
# sampling
target = str_split_1(d1$drawing[i], pattern = ",")[2] %>%
base64decode() %>%
image_read()
# Create a blank spacer (adjust width for more space)
spacer <- image_blank(width = 400, height = 10, color = "white")
copy = str_split_1(d1$drawing_copy[i], pattern = ",")[2] %>% # Remove the prefix
base64decode() %>% # Decode base64 string to raw image data
image_read() #%>% # Convert raw image data to a magick image object
# image_resize("200x200")  # could use this to resize if necessary
#plot(copy)
# Combine images side by side
combined_img <- image_append(c(target, spacer, copy))  # Combine horizontally
plot(combined_img)
# turning off device
dev.off()
}
?sample(1:nrow(d1), 1)
# naming batch
batch = 3
# number of images
n = setSize
# setting up loop
for (j in 1:n) {
# setting up the file attributes
path_name = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_export/"
file_name = paste0(path_name,"test_pair_", j, "_batch_", batch, ".png")
png(file_name, units="in", width=7.29, height=4.51, res=500)
# sampling a random pair index
i = sample(1:nrow(d1), 1, replace = FALSE)
# sampling
target = str_split_1(d1$drawing[i], pattern = ",")[2] %>%
base64decode() %>%
image_read()
# Create a blank spacer (adjust width for more space)
spacer <- image_blank(width = 400, height = 10, color = "white")
copy = str_split_1(d1$drawing_copy[i], pattern = ",")[2] %>% # Remove the prefix
base64decode() %>% # Decode base64 string to raw image data
image_read() #%>% # Convert raw image data to a magick image object
# image_resize("200x200")  # could use this to resize if necessary
#plot(copy)
# Combine images side by side
combined_img <- image_append(c(target, spacer, copy))  # Combine horizontally
plot(combined_img)
# turning off device
dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
cc <- read.csv("/Users/christianstenbro/Desktop/HKU/HKU Undervisning/Chinese Characters/set_4.csv")
cc
meaning_list <- c(cc$Meaning, cc$Meaning.1, cc$Meaning.2
)
cc_list <- c(cc$CC, cc$CC.1, cc$CC.2
)
meaning_list
cc_list
# removing empty entries
cc_list <- cc_list[nzchar(cc_list)]
meaning_list <- meaning_list[nzchar(meaning_list)]
meaning_list
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
meaning_list
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
```{r}
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 5, replace = FALSE)
sample(meaning_list, 40, replace = FALSE)
sample(meaning_list, 30, replace = FALSE)
sample(meaning_list, 30, replace = FALSE)
compound <- c(cc$Compound.words, cc$Compound.words.1, cc$Compound.words.2)
sample(compound, 5)
compoundÂ·compound[nzchar(meaning_list)]
compound <- compound[nzchar(meaning_list)]
sample(meaning_list, 30, replace = FALSE)
sample(compound, 5)
sample(compound, 5)
