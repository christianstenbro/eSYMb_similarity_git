knitr::opts_chunk$set(echo = TRUE)
# checking that none of the lists has any repeating pairs
status <- list()
knitr::opts_chunk$set(echo = TRUE)
unique(status)
knitr::opts_chunk$set(echo = TRUE)
unique(status)
knitr::opts_chunk$set(echo = TRUE)
status <- list()
for (i in 1:length(setListTest)) {
status[i] <- (length(unique(setListTest[[i]])) == length(setListTest[[i]]))
}
unique(status)
knitr::opts_chunk$set(echo = TRUE)
status
knitr::opts_chunk$set(echo = TRUE)
table(status)
knitr::opts_chunk$set(echo = TRUE)
table(status)
knitr::opts_chunk$set(echo = TRUE)
tabulate(status)
knitr::opts_chunk$set(echo = TRUE)
xtab(status)
knitr::opts_chunk$set(echo = TRUE)
xtabs(status)
knitr::opts_chunk$set(echo = TRUE)
table(status)
knitr::opts_chunk$set(echo = TRUE)
freq(status)
knitr::opts_chunk$set(echo = TRUE)
frequency()```
knitr::opts_chunk$set(echo = TRUE)
frequency(status)
knitr::opts_chunk$set(echo = TRUE)
status
knitr::opts_chunk$set(echo = TRUE)
unique(status)
knitr::opts_chunk$set(echo = TRUE)
# Function to insert attention checks into stimuli sets.
# An attention check is always appended to the last and first position of the stimuli list. The position of the remaining four checks is randomly sampled from equally spaced intervals, whose width is defined via the interval_span variable.
create_attention_check_index <- function(stimuli_set_length, interval_span) {
interval_center <- ceiling(stimuli_set_length / 6);
att_check_position_list <- c(stimuli_set_length,
sample((interval_center*4 - interval_span ):( interval_center*4 + interval_span ), 1),
sample((interval_center*3 - interval_span ):( interval_center*3 + interval_span ), 1),
sample((interval_center*2 - interval_span ):( interval_center*2 + interval_span ), 1),
sample((interval_center*1 - interval_span ):( interval_center*1 + interval_span ), 1),
0); # this has to be in reversed order as the set will keep growing as we add new entries
return(att_check_position_list);
}
knitr::opts_chunk$set(echo = TRUE)
# Defining attention check proxy names
attention_check_names <- c("a1", "a2", "a3", "a4", "a5", "a6")
knitr::opts_chunk$set(echo = TRUE)
# A function that appends the attention check indices to the the stimuli list
append_attention_checks <- function(stimuli_set_list, interval_span = 10, random_seed) {
# creating a new list
setListAttCheck <- list()
# looping through the old set lists to add attention checks
for (i in 1:participant_num) {
setList <- stimuli_set_list;
x <- setList[[i]];
shuffled_att_check_names <- sample(attention_check_names);
att_check_index_list <- create_attention_check_index(stimuli_set_length = length(setList[[i]]),
interval_span = interval_span);
for (j in 1:6) {
x <- append(x, shuffled_att_check_names[j], after = att_check_index_list[j]);
}
setListAttCheck[[i]] <- x;
}
return(setListAttCheck);
}
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
append_attention_checks(stimuli_set_list = setListTest,
interval_span = 10,
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks <- append_attention_checks(stimuli_set_list = setListTest,
interval_span = 10,
random_seed = 2025)
# visualising lengths of the final ratings sets
length_list <- lapply(setListTestAttentionChecks, length)
simplehist(unlist(length_list),
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
finalize_set <- function(set_list_with_checks, path, file_name, study_nr, number_of_ratings) {
# adding indices ('names') to the setList
names(set_list_with_checks) <- as.character(seq_along(set_list_with_checks))
# converting to JSON
setListAttCheckJSON <- jsonlite::toJSON(set_list_with_checks, pretty = TRUE)
# saving to the drive
iteration = paste0("_", study_nr, "_", number_of_ratings) # please change before running to avoid overwriting existing file
extension = ".JSON"
write(setListAttCheckJSON, file = paste0(path, file_name, iteration, extension))
}
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = new_stim_list,
study_nr = 1,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 1,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# A function to finalize the set as a JSON file and save it in a specified location
finalize_set <- function(set_list_with_checks, path, file_name, study_nr, number_of_ratings) {
# adding indices ('names') to the setList
names(set_list_with_checks) <- as.character(seq_along(set_list_with_checks))
# converting to JSON
setListAttCheckJSON <- jsonlite::toJSON(set_list_with_checks, pretty = TRUE)
# saving to the drive
iteration = paste0("_study_", study_nr, "_", number_of_ratings, "_ratings") # please change before running to avoid overwriting existing file
extension = ".JSON"
write(setListAttCheckJSON, file = paste0(path, file_name, iteration, extension))
}
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 1,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# creating stimuli set for study 1
setList1 <- create_random_subsets(participant_num = 30,
ratings_pr_image = 5,
drawingNumber = length(study_1_stimuli),
random_seed = 2025)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList1))
unique(table(unlist(setList1)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList1)) {
status[i] <- (length(unique(setList1[[i]])) == length(setList1[[i]]))
}
unique(status) # this should be TRUE
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks <- append_attention_checks(stimuli_set_list = setList1,
interval_span = 10,
random_seed = 2025)
# visualising lengths of the final ratings sets
length_list <- lapply(setListTestAttentionChecks, length)
simplehist(unlist(length_list),
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 1,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks <- append_attention_checks(stimuli_set_list = setList1,
interval_span = 10,
random_seed = 2025)
# visualising lengths of the final ratings sets
length_list <- lapply(setListTestAttentionChecks, length)
simplehist(unlist(length_list),
main = "Stim set from study 1"
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks <- append_attention_checks(stimuli_set_list = setList1,
interval_span = 10,
random_seed = 2025)
# visualising lengths of the final ratings sets
length_list <- lapply(setListTestAttentionChecks, length)
simplehist(unlist(length_list),
main = "Stim set from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks <- append_attention_checks(stimuli_set_list = setList1,
interval_span = 10,
random_seed = 2025)
# visualising lengths of the final ratings sets
length_list <- lapply(setListTestAttentionChecks, length)
simplehist(unlist(length_list),
main = "Stim sets from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks1 <- append_attention_checks(stimuli_set_list = setList1,
interval_span = 10,
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 1,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# visualising lengths of the final ratings sets
length_list <- lapply(setListTestAttentionChecks1, length)
simplehist(unlist(length_list),
main = "Stim sets from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks1,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 1,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# creating stimuli set for study 1
setList2 <- create_random_subsets(participant_num = 30,
ratings_pr_image = 5,
drawingNumber = length(study_2_stimuli),
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList2))
unique(table(unlist(setList2)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList2)) {
status[i] <- (length(unique(setList2[[i]])) == length(setList2[[i]]))
}
unique(status) # this should be TRUE
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks2 <- append_attention_checks(stimuli_set_list = setList2,
interval_span = 10,
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks2,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 2,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# visualising lengths of the final ratings sets
# set 1
length_list <- lapply(setListTestAttentionChecks1, length)
simplehist(unlist(length_list),
main = "Stim sets from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 2
length_list <- lapply(setListTestAttentionChecks2, length)
simplehist(unlist(length_list),
main = "Stim sets from study 2",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
# creating stimuli set for study 3
setList3 <- create_random_subsets(participant_num = 60,
ratings_pr_image = 5,
drawingNumber = length(study_3_stimuli),
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList3))
unique(table(unlist(setList3)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList3)) {
status[i] <- (length(unique(setList3[[i]])) == length(setList3[[i]]))
}
unique(status) # this should be TRUE
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks3 <- append_attention_checks(stimuli_set_list = setList3,
interval_span = 10,
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks3,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 3,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# visualising lengths of the final ratings sets
# set 1
length_list <- lapply(setListTestAttentionChecks1, length)
simplehist(unlist(length_list),
main = "Stim sets from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 2
length_list <- lapply(setListTestAttentionChecks2, length)
simplehist(unlist(length_list),
main = "Stim sets from study 2",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 3
length_list <- lapply(setListTestAttentionChecks3, length)
simplehist(unlist(length_list),
main = "Stim sets from study 3",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
knitr::opts_chunk$set(echo = TRUE)
setListTestAttentionChecks3
knitr::opts_chunk$set(echo = TRUE)
length(setListTestAttentionChecks3)
knitr::opts_chunk$set(echo = TRUE)
# creating stimuli set for study 3
setList3 <- create_random_subsets(participant_num = 60,
ratings_pr_image = 5,
drawingNumber = length(study_3_stimuli),
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList3))
unique(table(unlist(setList3)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList3)) {
status[i] <- (length(unique(setList3[[i]])) == length(setList3[[i]]))
}
unique(status) # this should be TRUE
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks3 <- append_attention_checks(stimuli_set_list = setList3,
interval_span = 10,
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks3,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 3,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# visualising lengths of the final ratings sets
# set 1
length_list <- lapply(setListTestAttentionChecks1, length)
simplehist(unlist(length_list),
main = "Stim sets from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 2
length_list <- lapply(setListTestAttentionChecks2, length)
simplehist(unlist(length_list),
main = "Stim sets from study 2",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 3
length_list <- lapply(setListTestAttentionChecks3, length)
simplehist(unlist(length_list),
main = "Stim sets from study 3",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
length(setListTestAttentionChecks3)
knitr::opts_chunk$set(echo = TRUE)
length(setList3)
knitr::opts_chunk$set(echo = TRUE)
setListTestAttentionChecks3
knitr::opts_chunk$set(echo = TRUE)
length(setListTestAttentionChecks3)
knitr::opts_chunk$set(echo = TRUE)
# A function that appends the attention check indices to the the stimuli list
append_attention_checks <- function(stimuli_set_list, interval_span = 10, random_seed) {
# creating a new list
setListAttCheck <- list()
# defining variables
n = length(stimuli_set_list) # corresponds to the participant number
# looping through the old set lists to add attention checks
for (i in 1:n) {
setList <- stimuli_set_list;
x <- setList[[i]];
shuffled_att_check_names <- sample(attention_check_names);
att_check_index_list <- create_attention_check_index(stimuli_set_length = length(setList[[i]]),
interval_span = interval_span);
for (j in 1:6) {
x <- append(x, shuffled_att_check_names[j], after = att_check_index_list[j]);
}
setListAttCheck[[i]] <- x;
}
return(setListAttCheck);
}
knitr::opts_chunk$set(echo = TRUE)
# creating stimuli set for study 1
setList1 <- create_random_subsets(participant_num = 30,
ratings_pr_image = 5,
drawingNumber = length(study_1_stimuli),
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList1))
unique(table(unlist(setList1)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList1)) {
status[i] <- (length(unique(setList1[[i]])) == length(setList1[[i]]))
}
unique(status) # this should be TRUE
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks1 <- append_attention_checks(stimuli_set_list = setList1,
interval_span = 10,
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks1,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 1,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# creating stimuli set for study 2
setList2 <- create_random_subsets(participant_num = 30,
ratings_pr_image = 5,
drawingNumber = length(study_2_stimuli),
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList2))
unique(table(unlist(setList2)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList2)) {
status[i] <- (length(unique(setList2[[i]])) == length(setList2[[i]]))
}
unique(status) # this should be TRUE
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks2 <- append_attention_checks(stimuli_set_list = setList2,
interval_span = 10,
random_seed = 2025)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks2,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 2,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# creating stimuli set for study 3
setList3 <- create_random_subsets(participant_num = 60,
ratings_pr_image = 5,
drawingNumber = length(study_3_stimuli),
random_seed = 2025)
length(setList3)
knitr::opts_chunk$set(echo = TRUE)
# visualising to check that each pair appears n times across all lists
simplehist(unlist(setList3))
unique(table(unlist(setList3)))
# checking that none of the lists has any repeating pairs
status <- list()
for (i in 1:length(setList3)) {
status[i] <- (length(unique(setList3[[i]])) == length(setList3[[i]]))
}
unique(status) # this should be TRUE
knitr::opts_chunk$set(echo = TRUE)
# adding attention checks
setListTestAttentionChecks3 <- append_attention_checks(stimuli_set_list = setList3,
interval_span = 10,
random_seed = 2025)
length(setListTestAttentionChecks3)
knitr::opts_chunk$set(echo = TRUE)
finalize_set(set_list_with_checks = setListTestAttentionChecks3,
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/drawing_lists/",
file_name = "new_stim_list",
study_nr = 3,
number_of_ratings = 5)
knitr::opts_chunk$set(echo = TRUE)
# visualising lengths of the final ratings sets
# set 1
length_list <- lapply(setListTestAttentionChecks1, length)
simplehist(unlist(length_list),
main = "Stim sets from study 1",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 2
length_list <- lapply(setListTestAttentionChecks2, length)
simplehist(unlist(length_list),
main = "Stim sets from study 2",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
# set 3
length_list <- lapply(setListTestAttentionChecks3, length)
simplehist(unlist(length_list),
main = "Stim sets from study 3",
xlab = "Number of drawings in the final rating sets \n(after adding attention checks)")
length(setListTestAttentionChecks3)
knitr::opts_chunk$set(echo = TRUE)
# converting the file name list to a JSON file
stimuliFileNameListStudy1 <- jsonlite::toJSON(study_1_stimuli, pretty = TRUE)
knitr::opts_chunk$set(echo = TRUE)
stimuliFileNameListStudy1
knitr::opts_chunk$set(echo = TRUE)
# converting the file name lists to JSON files
stimuliFileNameListStudy1 <- jsonlite::toJSON(study_1_stimuli, pretty = TRUE)
knitr::opts_chunk$set(echo = TRUE)
stimuliFileNameListStudy1 <- jsonlite::toJSON(study_1_stimuli, pretty = TRUE)
stimuliFileNameListStudy2 <- jsonlite::toJSON(study_2_stimuli, pretty = TRUE)
stimuliFileNameListStudy3 <- jsonlite::toJSON(study_3_stimuli, pretty = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# saving the JSON files
save_stim_list <- function(name, iteration) {
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/stimuliFileNameLists/"
extension = ".JSON"
write(stimuliFileNameList, file = paste0(path, name, iteration, extension))
}
knitr::opts_chunk$set(echo = TRUE)
# saving the JSON files
save_stim_list <- function(stim_file_name_list, name, study, iteration) {
path = "/Users/christianstenbro/AU/eSYMb/Similarity Rating Exp/From Murillo OneDrive/stimuliFileNameLists/"
extension = ".JSON"
write(stim_file_name_list, file = paste0(path, name, "_study_", study, "_", iteration, extension))
}
knitr::opts_chunk$set(echo = TRUE)
# study 1
save_stim_list(stim_file_name_list = stimuliFileNameListStudy1,
name = "stim_file_name_list",
study = 1,
iteration = "iteration_1")
# study 2
save_stim_list(stim_file_name_list = stimuliFileNameListStudy2,
name = "stim_file_name_list",
study = 2,
iteration = "iteration_1")
# study 3
save_stim_list(stim_file_name_list = stimuliFileNameListStudy3,
name = "stim_file_name_list",
study = 3,
iteration = "iteration_1")
